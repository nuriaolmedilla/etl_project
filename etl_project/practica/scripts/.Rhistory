c("hola", "como estás")
c("hola", "cómo estás")
c("1", 2)
list("1", 2)
lista_de_dataframes <- list(iris, mtcars)
lista_de_dataframes [[1]]
lista_de_dataframes[[2]]
lista_de_dataframes[[1]]
lista_de_dataframes[[2]]
list(c(1, 2, 3), c("4", "5", "6", "7"))
mean(df_customer$churn)
filtrado_aleatorio2 <- function(proporcion) {
df_redux <- df_customer %>%
mutate(selector = runif(nrow(df_customer))) %>%
filter(selector <= proporcion)
return(mean(df_redux$churn))
}
filtrado_aleatorio2(0,4)
filtrado_aleatorio2(0.4)
filtrado_aleatorio2(0.1)
filtrado_aleatorio2(0.9)
nrow(lista_de_dataframes[[1]])
nrow(lista_de_dataframes[[2]])
lista_de_n_filas <- lapply(lista_de_dataframes, nrow)
lista_de_n_filas[[1]]
filtrado_aleatorio2 <- function(proporcion) {
df_redux <- df_customer %>%
mutate(selector = runif(nrow(df_customer))) %>%
filter(selector <= proporcion)
return(mean(df_redux$churn))
}
# Lista de proporciones
proporciones <- seq(0.1, 0.9, by = 0.1)
# Aplicar la función filtrado_aleatorio2 a cada proporción
medias_churn <- lapply(proporciones, filtrado_aleatorio2)
# Mostrar los resultados
medias_churn
# Parámetros proporcionados
media_muestral <- 20       # Media de edad de la muestra
desviacion_estandar <- 14.12 # Desviación estándar poblacional
nivel_confianza <- 0.95     # Nivel de confianza del 95%
z_alpha <- qnorm(1 - (1 - nivel_confianza) / 2) # Valor crítico Z para el 95% de confianza
# Caso 1: Muestra de 10 pasajeros
n1 <- 10
error_estandar_1 <- desviacion_estandar / sqrt(n1)
limite_inferior_1 <- media_muestral - z_alpha * error_estandar_1
limite_superior_1 <- media_muestral + z_alpha * error_estandar_1
intervalo_confianza_1 <- c(limite_inferior_1, limite_superior_1)
# Caso 2: Muestra de 100 pasajeros
n2 <- 100
error_estandar_2 <- desviacion_estandar / sqrt(n2)
limite_inferior_2 <- media_muestral - z_alpha * error_estandar_2
limite_superior_2 <- media_muestral + z_alpha * error_estandar_2
intervalo_confianza_2 <- c(limite_inferior_2, limite_superior_2)
# Mostrar resultados
intervalo_confianza_1
# [1] 11.24849 28.75151
intervalo_confianza_2
# Parámetros proporcionados
media_muestral <- 50       # Media de la tarifa de la muestra
media_hipotetica <- 60     # Media hipotética (media bajo H0)
desviacion_estandar <- 49.8 # Desviación estándar poblacional
n <- 20                    # Tamaño de la muestra
nivel_confianza <- 0.95    # Nivel de confianza del 95%
# Cálculo del estadístico Z
error_estandar <- desviacion_estandar / sqrt(n)
z <- (media_muestral - media_hipotetica) / error_estandar
# Valor crítico para una prueba de dos colas al 95% de confianza
z_critico <- qnorm(1 - (1 - nivel_confianza) / 2)
# Mostrar resultados
z
# [1] -0.8980193
z_critico
# Cargar los datos del Titanic
# Instala y carga 'titanic' si no tienes los datos (en caso de usar datos directos en RStudio)
install.packages("titanic")
library(titanic)
data <- titanic::titanic_train
# Crear el boxplot
boxplot(Fare ~ Survived, data = data,
main = "Distribución de Fare por Supervivencia",
xlab = "Supervivencia (0 = No, 1 = Sí)",
ylab = "Fare",
col = c("red", "blue"))
# Calcular las medias de Fare para cada grupo de Survived
media_fare_no <- mean(data$Fare[data$Survived == 0], na.rm = TRUE)
media_fare_si <- mean(data$Fare[data$Survived == 1], na.rm = TRUE)
cat("Media de Fare para Survived = 0:", media_fare_no, "\n")
# Media de Fare para Survived = 0: 22.11789
cat("Media de Fare para Survived = 1:", media_fare_si, "\n")
# Realizar ANOVA
anova_resultado <- aov(Fare ~ factor(Survived), data = data)
summary(anova_resultado)
# Parámetros proporcionados
media_muestral <- 20       # Media de edad de la muestra
desviacion_estandar <- 14.12 # Desviación estándar poblacional
nivel_confianza <- 0.95     # Nivel de confianza del 95%
# Datos
media_edad <- 20
desviacion <- 14.12
n_10 <- 10
n_100 <- 100
confianza <- 0.95
# Función para calcular el intervalo de confianza
calcular_IC <- function(media, sd, n, confianza) {
error_est <- sd / sqrt(n)
z <- qnorm(1 - (1 - confianza) / 2) # Valor z para un nivel de confianza del 95%
inferior <- media - z * error_est
superior <- media + z * error_est
return(c(inferior, superior))
}
# Intervalo de confianza para n = 10
IC_10 <- calcular_IC(media_edad, desviacion, n_10, confianza)
IC_10
# Intervalo de confianza para n = 100
IC_100 <- calcular_IC(media_edad, desviacion, n_100, confianza)
IC_100
# Datos
media_tarifa <- 50
desviacion_tarifa <- 49.8
n_tarifa <- 20
media_hipotetica <- 60
# Cálculo de la prueba z
error_est_tarifa <- desviacion_tarifa / sqrt(n_tarifa)
z_tarifa <- (media_tarifa - media_hipotetica) / error_est_tarifa
p_valor <- 2 * pnorm(-abs(z_tarifa)) # Prueba bilateral
# Resultados
z_tarifa
p_valor
# Cargar la librería y los datos de Titanic
library(ggplot2)
library(datasets)
data("Titanic")
# Convertimos los datos a data frame si es necesario
titanic_data <- as.data.frame(Titanic)
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
View(titanic)
data("Titanic")
# Convertimos los datos a data frame si es necesario
titanic_data <- as.data.frame(Titanic)
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
# Boxplot
ggplot(titanic_data, aes(x = factor(Survived), y = Fare)) +
geom_boxplot() +
labs(x = "Survived", y = "Fare", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Boxplot
ggplot(titanic_data, aes(x = factor(Survived), y = Fare)) +
geom_boxplot() +
labs(x = "Survived", y = "Fare", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
install.packages("titanic")
library(titanic)
data("titanic_train")
titanic_data <- titanic_train
# Verificamos las primeras columnas
head(titanic_data)
# Aseguramos que solo usamos las columnas "Fare" y "Survived"
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
library(titanic)
data("titanic_train")
titanic_data <- titanic_train
# Verificamos las primeras columnas
head(titanic_data)
# Aseguramos que solo usamos las columnas "Fare" y "Survived"
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
# Convertimos los datos a data frame si es necesario
titanic_data <- as.data.frame(titanic)
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
# Boxplot
ggplot(titanic_data, aes(x = factor(Survived), y = Fare)) +
geom_boxplot() +
labs(x = "Survived", y = "Fare", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Generar el boxplot de Fare según Survived
ggplot(titanic_data, aes(x = Survived, y = Fare)) +
geom_boxplot() +
labs(x = "Supervivencia", y = "Tarifa (Fare)", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Cargar la librería y los datos de Titanic
library(ggplot2)
# Generar el boxplot de Fare según Survived
ggplot(titanic_data, aes(x = Survived, y = Fare)) +
geom_boxplot() +
labs(x = "Supervivencia", y = "Tarifa (Fare)", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Boxplot
ggplot(titanic_data, aes(x = factor(Survived), y = Fare)) +
geom_boxplot() +
labs(x = "Survived", y = "Fare", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Apartado 2
# Datos
media_tarifa <- 50         # Media de la tarifa de la muestra
desviacion_tarifa <- 49.8  # Desviación estándar poblacional
n_tarifa <- 20             # Tamaño de la muestra
media_hipotetica <- 60     # Media hipotética (media bajo H0)
# Cálculo de la prueba z
error_est_tarifa <- desviacion_tarifa / sqrt(n_tarifa)
z_tarifa <- (media_tarifa - media_hipotetica) / error_est_tarifa
p_valor <- 2 * pnorm(-abs(z_tarifa))
# Resultados
z_tarifa
p_valor
# Mostrar resultados
z
# [1] -0.8980193
z_critico
data("titanic_train")
titanic_data <- titanic_train
# Verificamos las primeras columnas
head(titanic_data)
# Aseguramos que solo usamos las columnas "Fare" y "Survived"
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
# Aseguramos que solo usamos las columnas "Fare" y "Survived"
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
# Convertimos los datos a data frame si es necesario
titanic_data <- as.data.frame(titanic)
titanic_data <- subset(titanic_data, select = c("Fare", "Survived"))
# Instalar las librerías si es necesario
install.packages("tidyverse", "ggplot2")
# Cargar las librerías
library(tidyverse)
library(ggplot2)
# Para 10 pasajeros
n1 <- 10
xbar1 <- 20
sigma <- 14.12
z <- qnorm(0.975)  # Valor crítico para un intervalo de confianza del 95%
error_estandar1 <- sigma / sqrt(n1)
intervalo1 <- c(xbar1 - z * error_estandar1, xbar1 + z * error_estandar1)
print(intervalo1)
# Generar el boxplot de Fare según Survived
ggplot(titanic_data, aes(x = Survived, y = Fare)) +
geom_boxplot() +
labs(x = "Supervivencia", y = "Tarifa (Fare)", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Para 100 pasajeros
n2 <- 100
xbar2 <- 20
error_estandar2 <- sigma / sqrt(n2)
intervalo2 <- c(xbar2 - z * error_estandar2, xbar2 + z * error_estandar2)
print(intervalo2)
# Datos
n <- 20
xbar <- 50
mu0 <- 60
sigma <- 49.8
z <- qnorm(0.975)  # Valor crítico
error_estandar <- sigma / sqrt(n)
z_calculado <- (xbar - mu0) / error_estandar
# Valor p
p_value <- 2 * pnorm(-abs(z_calculado))
# Decisión
if (p_value < 0.05) {
print("Rechazamos la hipótesis nula. La media de la tarifa no es 60 libras.")
} else {
print("No podemos rechazar la hipótesis nula. La media de la tarifa podría ser 60 libras.")
}
p_value
p_valor
# Decisión
if (p_valor < 0.05) {
print("Rechazamos la hipótesis nula. La media de la tarifa no es 60 libras.")
} else {
print("No podemos rechazar la hipótesis nula. La media de la tarifa podría ser 60 libras.")
}
titanic_data <- read.csv("titanic.csv")
# Boxplot
ggplot(titanic_data, aes(x = factor(Survived), y = Fare)) +
geom_boxplot() +
labs(x = "Sobrevivió", y = "Tarifa", title = "Relación entre Tarifa y Supervivencia")
# Medias
titanic_data %>%
group_by(Survived) %>%
summarize(media_fare = mean(Fare))
# ANOVA
anova_result <- aov(Fare ~ Survived, data = titanic_data)
summary(anova_result)
# Generar el boxplot de Fare según Survived
ggplot(titanic_data, aes(x = Survived, y = Fare)) +
geom_boxplot() +
labs(x = "Supervivencia", y = "Tarifa (Fare)", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Boxplot
ggplot(titanic_data, aes(x = factor(Survived), y = Fare)) +
geom_boxplot() +
labs(x = "Survived", y = "Fare", title = "Distribución de Fare según Supervivencia") +
theme_minimal()
# Medias de Fare para cada grupo de supervivencia
media_fare_survived <- aggregate(Fare ~ Survived, data = titanic_data, mean)
# ANOVA
anova_result <- aov(Fare ~ factor(Survived), data = titanic_data)
summary(anova_result)
# Verificamos el valor p del ANOVA
p_valor_anova <- summary(anova_result)[[1]]["Pr(>F)"][1]
p_valor_anova
library(ggplot2)
library(datasets)
library(titanic)
# Datos
media_edad <- 20     # Media de edad de la muestra
desviacion <- 14.12  # Desviación estándar poblacional
n_10 <- 10
n_100 <- 100
confianza <- 0.95    # Nivel de confianza del 95%
# Función para calcular el intervalo de confianza
calcular_IC <- function(media, sd, n, confianza) {
error_est <- sd / sqrt(n)
z <- qnorm(1 - (1 - confianza) / 2) # Valor z para un nivel de confianza del 95%
inferior <- media - z * error_est
superior <- media + z * error_est
return(c(inferior, superior))
}
# Intervalo de confianza para n = 10
IC_10 <- calcular_IC(media_edad, desviacion, n_10, confianza)
IC_10
# Intervalo de confianza para n = 100
IC_100 <- calcular_IC(media_edad, desviacion, n_100, confianza)
IC_100
# Apartado 2
# Datos
media_tarifa <- 50         # Media de la tarifa de la muestra
desviacion_tarifa <- 49.8  # Desviación estándar poblacional
n_tarifa <- 20             # Tamaño de la muestra
media_hipotetica <- 60     # Media hipotética (media bajo H0)
# Cálculo de la prueba z
error_est_tarifa <- desviacion_tarifa / sqrt(n_tarifa)
z_tarifa <- (media_tarifa - media_hipotetica) / error_est_tarifa
p_valor <- 2 * pnorm(-abs(z_tarifa))
# Resultados
z_tarifa
p_valor
# Decisión
if (p_valor < 0.05) {
print("Rechazamos la hipótesis nula. La media de la tarifa no es 60 libras.")
} else {
print("No podemos rechazar la hipótesis nula. La media de la tarifa podría ser 60 libras.")
}
# Apartado 3
data("titanic_train")
titanic_data <- titanic_train
# Boxplot
ggplot(titanic_data, aes(x = factor(Survived), y = Fare)) +
geom_boxplot() +
labs(x = "Sobrevivió", y = "Tarifa", title = "Relación entre Tarifa y Supervivencia")
# Medias
titanic_data %>%
group_by(Survived) %>%
summarize(media_fare = mean(Fare))
library(dplyr)
# Medias
titanic_data %>%
group_by(Survived) %>%
summarize(media_fare = mean(Fare))
# ANOVA
anova_result <- aov(Fare ~ Survived, data = titanic_data)
summary(anova_result)
error_est_tarifa
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(janitor)
walmart_sales <- read_csv("Downloads/walmart_sales")
walmart_sales <- clean_names(walmart_sales)
length(unique(walmart_sales$store))
walmart_sales <- walmart_sales  %>%
select(-c(store, type))
#2
walmart_sales <- walmart_sales %>%
mutate(id = paste0("d",dept))
class(walmart_sales$dept)
walmart_sales <- walmart_sales %>%
mutate(dept = as.integer(dept))
class(walmart_sales$dept)
#3
walmart_sales <- walmart_sales %>%
mutate(temperature = (temperature - 32)*(5/9))
#4
walmart_sales <- walmart_sales %>%
mutate(year = as.integer(year(date)))
#ventas totales por año
walmart_sales %>%
group_by(year) %>%
summarise(conteo = sum(weekly_sales))
#ventas totales por año y departamento
walmart_sales %>%
group_by(year,dept) %>%
summarise(conteo = sum(weekly_sales)) %>%
ungroup() %>%
arrange(desc(conteo))
#5
walmart_sales %>%
group_by(is_holiday, year) %>%
summarise(media_ventas = mean(weekly_sales))
#6
ventas_semanales <- walmart_sales %>%
group_by(date) %>%
summarise(conteo = sum(weekly_sales))
ggplot(ventas_semanales)+
geom_line(aes(date, conteo), size = 0.7)+
labs(title = "Ventas semanales", x = "Fecha", y = "Ventas semanales")
ventas_semanales_dep <- walmart_sales %>%
group_by(dept, date) %>%
summarise(conteo = sum(weekly_sales)) %>%
ungroup()
ggplot(ventas_semanales_dep)+
geom_line(aes(date, conteo), size = 0.7)+
labs(title = "Ventas semanales por departamento", x = "Fecha", y = "Ventas semanales")+
facet_wrap(~dept)
#7
df_transposed <- walmart_sales %>%
select(date, weekly_sales, cpi, unemployment) %>%
pivot_longer(c(cpi, unemployment))
ggplot(df_transposed)+
geom_point(aes(value, weekly_sales))+
facet_wrap(~name, scales = "free")
#8
prueba <- function(año, departamento){
df_filtrado <- walmart_sales %>%
filter(year == año & dept == departamento)
return(df_filtrado)
}
prueba(2010,3)
#9
for(year in unique(walmart_sales[["year"]])){
for(dept in unique(walmart_sales[["dept"]])){
funcion = prueba(year,dept)
nombre = paste0("C:/CLAUDIA/OUTPUT", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)
}}
nombre = paste0("Downloads/walmart_sales", "/sales-", year,"-d",dept,".csv")
nombre = paste0("Downloads/", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)
for(dept in unique(walmart_sales[["dept"]])){
funcion = prueba(year,dept)
nombre = paste0("Downloads/", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)
}}
for(dept in unique(walmart_sales[["dept"]])){
funcion = prueba(year,dept)
nombre = paste0("Downloads/", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)
}}
for(year in unique(walmart_sales[["year"]])){
for(dept in unique(walmart_sales[["dept"]])){
funcion = prueba(year,dept)
nombre = paste0("Downloads/", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)
}}
for(dept in unique(walmart_sales[["dept"]])){
funcion = prueba(year,dept)
nombre = paste0("Downloads/", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)
}}
write.csv(funcion, file = nombre, row.names = FALSE)}}
write.csv(funcion, file = nombre, row.names = FALSE)}}
for(year in unique(walmart_sales[["year"]])){
for(dept in unique(walmart_sales[["dept"]])){
funcion = prueba(year,dept)
nombre = paste0("Downloads/", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)}}
#10
seleccion <- function(n){
total_departamentos <- length(unique(walmart_sales[["dept"]]))
if(n > total_departamentos){
n = total_departamentos
}
que_departamentos <- unique(walmart_sales[["dept"]])
muestra = sample(que_departamentos, n)
nombre = paste0("C:/CLAUDIA/OUTPUT", "/sales_", n,".csv")
write.csv(muestra, file = nombre, row.names = FALSE)
}
for(i in c(3,4,5)){
ejecutar = seleccion(i)
}
nombre = paste0("Downloads/", "/sales_", n,".csv")
seleccion <- function(n){
total_departamentos <- length(unique(walmart_sales[["dept"]]))
if(n > total_departamentos){
n = total_departamentos
}
que_departamentos <- unique(walmart_sales[["dept"]])
muestra = sample(que_departamentos, n)
nombre = paste0("Downloads/", "/sales_", n,".csv")
write.csv(muestra, file = nombre, row.names = FALSE)
}
for(i in c(3,4,5)){
ejecutar = seleccion(i)
}
nombre = paste0("Downloads/Outputs/", "/sales-", year,"-d",dept,".csv")
nombre = paste0("Downloads/Outputs/", "/sales_", n,".csv")
seleccion <- function(n){
total_departamentos <- length(unique(walmart_sales[["dept"]]))
if(n > total_departamentos){
n = total_departamentos
}
que_departamentos <- unique(walmart_sales[["dept"]])
muestra = sample(que_departamentos, n)
nombre = paste0("Downloads/Outputs/", "/sales_", n,".csv")
write.csv(muestra, file = nombre, row.names = FALSE)
}
for(i in c(3,4,5)){
ejecutar = seleccion(i)
}
for(year in unique(walmart_sales[["year"]])){
for(dept in unique(walmart_sales[["dept"]])){
funcion = prueba(year,dept)
nombre = paste0("Downloads/Outputs/", "/sales-", year,"-d",dept,".csv")
write.csv(funcion, file = nombre, row.names = FALSE)}}
